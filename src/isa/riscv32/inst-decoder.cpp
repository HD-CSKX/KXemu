#include "cpu/decoder.h"
#include "isa/riscv32/core.h"
#include "isa/riscv32/isa.h"

#define INSTPAT(pat, name) decoder.add(pat, &RV32Core::do_##name)

void RV32Core::init_decoder() {
    this->decoder.init(this);

    auto &decoder = this->decoder;
    
    INSTPAT("0000000 ????? ????? 000 ????? 01100 11", add);
    INSTPAT("0100000 ????? ????? 000 ????? 01100 11", sub);
    INSTPAT("0000000 ????? ????? 111 ????? 01100 11", and);
    INSTPAT("0000000 ????? ????? 110 ????? 01100 11", or);
    INSTPAT("0000000 ????? ????? 100 ????? 01100 11", xor);
    INSTPAT("0000000 ????? ????? 001 ????? 01100 11", sll);
    INSTPAT("0000000 ????? ????? 101 ????? 01100 11", srl);
    INSTPAT("0100000 ????? ????? 101 ????? 01100 11", sra);
    INSTPAT("0000000 ????? ????? 010 ????? 01100 11", slt);
    INSTPAT("0000000 ????? ????? 011 ????? 01100 11", sltu);
    
    INSTPAT("??????? ????? ????? 000 ????? 00100 11", addi);
    INSTPAT("??????? ????? ????? 111 ????? 00100 11", andi);
    INSTPAT("??????? ????? ????? 110 ????? 00100 11", ori);
    INSTPAT("??????? ????? ????? 100 ????? 00100 11", xori);
    INSTPAT("0000000 ????? ????? 001 ????? 00100 11", slli);
    INSTPAT("0000000 ????? ????? 101 ????? 00100 11", srli);
    INSTPAT("0100000 ????? ????? 101 ????? 00100 11", srai);
    INSTPAT("??????? ????? ????? 010 ????? 00100 11", slti);
    INSTPAT("??????? ????? ????? 011 ????? 00100 11", sltiu);

    INSTPAT("??????? ????? ????? 000 ????? 00000 11", lb);
    INSTPAT("??????? ????? ????? 100 ????? 00000 11", lbu);
    INSTPAT("??????? ????? ????? 001 ????? 00000 11", lh);
    INSTPAT("??????? ????? ????? 101 ????? 00000 11", lhu);
    INSTPAT("??????? ????? ????? 010 ????? 00000 11", lw);

    INSTPAT("??????? ????? ????? 000 ????? 01000 11", sb);
    INSTPAT("??????? ????? ????? 001 ????? 01000 11", sh);
    INSTPAT("??????? ????? ????? 010 ????? 01000 11", sw);

    INSTPAT("??????? ????? ????? 000 ????? 11000 11", beq);
    INSTPAT("??????? ????? ????? 001 ????? 11000 11", bne);
    INSTPAT("??????? ????? ????? 101 ????? 11000 11", bge);
    INSTPAT("??????? ????? ????? 111 ????? 11000 11", bgeu);
    INSTPAT("??????? ????? ????? 100 ????? 11000 11", blt);
    INSTPAT("??????? ????? ????? 110 ????? 11000 11", bltu);

    INSTPAT("??????? ????? ????? 000 ????? 11001 11", jalr);
    INSTPAT("??????? ????? ????? ??? ????? 11011 11", jal);

    INSTPAT("??????? ????? ????? ??? ????? 00101 11", auipc);
    INSTPAT("??????? ????? ????? ??? ????? 01101 11", lui);
    
    // Privileged mode
    INSTPAT("00000000000000000 000 00000 11100 11", ecall);
    INSTPAT("00000000000100000 000 00000 11100 11", ebreak);

    // M extension
    if (this->flags & RVFlag::M) {
        INSTPAT("0000001 ????? ????? 000 ????? 01100 11", mul);
        INSTPAT("0000001 ????? ????? 001 ????? 01100 11", mulh);
        INSTPAT("0000001 ????? ????? 010 ????? 01100 11", mulhsu);
        INSTPAT("0000001 ????? ????? 011 ????? 01100 11", mulhu);
        INSTPAT("0000001 ????? ????? 100 ????? 01100 11", div);
        INSTPAT("0000001 ????? ????? 101 ????? 01100 11", divu);
        INSTPAT("0000001 ????? ????? 110 ????? 01100 11", rem);
        INSTPAT("0000001 ????? ????? 111 ????? 01100 11", remu);
    }

    // Zicsr extension
    if (this->flags & RVFlag::Zicsr) {
        INSTPAT("???????????? ????? 001 ????? 11100 11", csrrw);
        INSTPAT("???????????? ????? 010 ????? 11100 11", csrrs);
        INSTPAT("???????????? ????? 011 ????? 11100 11", csrrc);
        INSTPAT("???????????? ????? 101 ????? 11100 11", csrrwi);
        INSTPAT("???????????? ????? 110 ????? 11100 11", csrrsi);
        INSTPAT("???????????? ????? 111 ????? 11100 11", csrrci);
    }

    // Privileged mode
    if (this->flags & RVFlag::Priv) {
        INSTPAT("0011000 00010 00000 000 00000 11100 11", mret);
    }

    // C extension
    if (this->flags & RVFlag::C) {
        this->cdecoder.init(this);
        auto &decoder = this->cdecoder;
        
        // NOTE: Pay attention to the order of the instructions in the init_c_extension function
        INSTPAT("0000 0000 0000 0000", invalid_inst);
        INSTPAT("100 1 00000 00000 10", ebreak); // same as do_ebreak

        INSTPAT("010 ? ????? ????? 10", c_lwsp);
        INSTPAT("110 ? ????? ????? 10", c_swsp);
        
        INSTPAT("010 ??? ??? ?? ??? 00", c_lw);
        INSTPAT("110 ??? ??? ?? ??? 00", c_sw);

        INSTPAT("101 ??????????? 01"  , c_j   );
        INSTPAT("001 ??????????? 01"  , c_jal );
        INSTPAT("100 0 ????? 00000 10", c_jr  );
        INSTPAT("100 1 ????? 00000 10", c_jalr);

        INSTPAT("110 ??? ??? ?? ??? 01", c_beqz);
        INSTPAT("111 ??? ??? ?? ??? 01", c_bnez);

        INSTPAT("000 ? ????? ????? 01", c_addi);
        INSTPAT("011 ? 00010 ????? 01", c_addi16sp);
        INSTPAT("000 ???????? ??? 00" , c_addi4spn);

        INSTPAT("010 ? ????? ????? 01", c_li );
        INSTPAT("011 ? ????? ????? 01", c_lui);

        INSTPAT("000 ? ????? ????? 10",  c_slli);
        INSTPAT("100 ? 00 ??? ????? 01", c_srli);
        INSTPAT("100 ? 01 ??? ????? 01", c_srai);
        INSTPAT("100 ? 10 ??? ????? 01", c_andi);

        INSTPAT("100 0 ????? ????? 10", c_mv );
        INSTPAT("100 1 ????? ????? 10", c_add);

        INSTPAT("100 0 11 ??? 00 ??? 01", c_sub);
        INSTPAT("100 0 11 ??? 01 ??? 01", c_xor);
        INSTPAT("100 0 11 ??? 10 ??? 01", c_or );
        INSTPAT("100 0 11 ??? 11 ??? 01", c_and);
    }
}
